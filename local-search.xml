<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>📣 git基本操作（下），欢迎食用~</title>
    <link href="/2023/08/31/%F0%9F%93%A3-git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%8C%E6%AC%A2%E8%BF%8E%E9%A3%9F%E7%94%A8/"/>
    <url>/2023/08/31/%F0%9F%93%A3-git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%8C%E6%AC%A2%E8%BF%8E%E9%A3%9F%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>本篇是学习(<a href="https://link.juejin.cn/?target=https://www.liaoxuefeng.com/wiki/896043488029600/898732864121440" title="https://www.liaoxuefeng.com/wiki/896043488029600/898732864121440">廖雪峰Git学习</a>)所写的学习总结笔记，方便自己后续回顾复习。</p><h1 id="📚-远程仓库"><a href="#📚-远程仓库" class="headerlink" title="📚 远程仓库"></a>📚 远程仓库</h1><p>在上篇中学到的git功能，其实在集中式版本管理系统中也能实现。git是分布式版本控制系统，同一个git仓库，可以分布到不同的机器上。下面介绍一下git杀手级功能之一：远程仓库。</p><p>首先需要先注册github账号，github是提供git仓库托管服务的，所以只要注册一个gitHub账号，就可以免费获得git远程仓库。由于你的本地git仓库和gitHub仓库之间的传输是通过SSH加密的，所以需要一点设置：</p><p><strong>第1步：创建SSH Key。</strong></p><p>在用户主目录下（我的电脑C:\Users\Administrator），看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 复制代码">ssh-keygen -t rsa -C &quot;填写你的邮箱&quot;<br></code></pre></td></tr></table></figure><p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20230901091116381.png" alt="image-20230901091116381" style="zoom:40%;"><p>可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p><p><strong>第2步：登陆GitHub，增加SSH Keys</strong></p><p>步骤为：①setting–&gt; ②SSH and GPG keys –&gt; ③new SSH key</p><p>填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件（公钥）的内容即可</p><blockquote><p>为什么GitHub需要SSH Key呢？</p><p>因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p></blockquote><p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p><h2 id="🌸-添加远程仓库"><a href="#🌸-添加远程仓库" class="headerlink" title="🌸 添加远程仓库"></a>🌸 添加远程仓库</h2><p><strong>本地仓库–&gt;远程仓库</strong></p><p>现在你在本地有一个git仓库，然后你想在github新建一个git远程仓库并让两个仓库进行同步，这样github上的仓库既可以用于备份，也可以让其他人通过该仓库进行协作。</p><p><strong>1.在github上新建仓库，名字可以和本地仓库不同。</strong></p><p>新建仓库后可以根据GitHub给的提示来进行操作，提示如下：</p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20230901092306430.png" alt="image-20230901092306430" style="zoom:30%;"><p>在本地仓库git bash中运行下列代码（根据自己的远程仓库提示来操作）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 复制代码">git remote add origin git@github.com:LuoyNothing/mygit.git<br></code></pre></td></tr></table></figure><p>添加后，远程库的名字就是<code>origin</code>，这里的<strong>origin为本地客户端认为的远程仓库的名字</strong>，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p><blockquote><p>在多人协作的时候，每个人都有自己的git本地客户端和本地仓库，每个人都可以给同一个远程仓库在本地指定不同的名字。</p><p>只不过，origin是git客户端默认的远程仓库的名字，如果我们在关联时将远程仓库的名字指定为origin，在push的时候可以不指定远程仓库的名字，默认push到origin关联的远程仓库。如果修改了名字，在push的时候必须写上指定的远程仓库的名字。</p></blockquote><p><strong>2.把本地库的所有内容推送到远程库上</strong></p><p>在本地仓库git bash中接着运行：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> -u &lt;远程分支&gt; &lt;本地分支&gt;<br>git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>推送步骤完成。<br>以后在本地仓库进行修改后要推送到远程仓库，直接执行<code>git push origin master</code></p><p>把本地<code>master</code>分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！</p><h2 id="🌸-删除远程仓库"><a href="#🌸-删除远程仓库" class="headerlink" title="🌸 删除远程仓库"></a>🌸 删除远程仓库</h2><p><strong>1.解绑远程仓库和本地仓库连接</strong></p><p>可以先查看一下远程库信息：<code>git remote -v</code>。然后根据名字删除，比如删除origin：<code>git remote rm origin</code></p><p><strong>2.在github上真正删除远程仓库</strong></p><h2 id="🌸-从远程仓库克隆"><a href="#🌸-从远程仓库克隆" class="headerlink" title="🌸 从远程仓库克隆"></a>🌸 从远程仓库克隆</h2><p>使用<code>git clone 地址</code>就可以克隆完成。地址中Git支持多种协议，包括<code>https</code>，但<code>ssh</code>协议速度最快。</p><h1 id="📚-分支管理"><a href="#📚-分支管理" class="headerlink" title="📚 分支管理"></a>📚 分支管理</h1><h2 id="🌸-分支的理解"><a href="#🌸-分支的理解" class="headerlink" title="🌸 分支的理解"></a>🌸 分支的理解</h2><p>在开发一个项目的时候，团队负责人会给每个团队成员划分不同的任务。如果每个人都在主分支上进行项目开发，这样会影响其他人的工作。因此为了不影响其他人的工作，可以每个人新开一个分支来完成自己的任务，最后测试没问题再合并到主分支上，最后所有人的任务分支都合并到主分支上则可完成项目协作开发。当然实际开发中，可能有些许不同，比如按照任务来新建分支，然后安排某人来开发这个分支，或者几个人负责一个分支，然后根据提交的情况来查看每个人的工作量。</p><p>每个人都有本地仓库和远程仓库，一般在项目开发中，自己本地开发完之后提交到远程仓库中属于自己的分支，避免数据遗失。</p><p>每一次commit都会有提交描述和提交时间，git会将这些commit根据提交时间来串成一个时间线。截止目前只有一个时间线，在git里叫主分支，名字为master。</p><p><code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20230901092416102.png" alt="image-20230901092416102" style="zoom:20%;"><p>每一次提交，master分支都会向前走一步，随着提交次数的增多，master分支就越来越长。</p><h2 id="🌸-创建与合并分支"><a href="#🌸-创建与合并分支" class="headerlink" title="🌸 创建与合并分支"></a>🌸 创建与合并分支</h2><p>创建一个新分支，名字为：dev。</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs q"><span class="hljs-comment">// 创建分支dev</span><br>git branch <span class="hljs-built_in">dev</span><br><span class="hljs-comment">// 切换分支dev</span><br>方式一：git checkout <span class="hljs-built_in">dev</span><br>方式二：git switch <span class="hljs-built_in">dev</span><br><span class="hljs-comment">// 创建并切换分支</span><br>方式一：git checkout -b <span class="hljs-built_in">dev</span><br>方式二(更语义，和前面撤销工作区的更新不产生冲突)：git switch -c <span class="hljs-built_in">dev</span><br><span class="hljs-comment">// 查看当前所有分支</span><br>git branch<br></code></pre></td></tr></table></figure><p>当创建了分支dev之后，git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20230901092542906.png" alt="image-20230901092542906" style="zoom:20%;"><p>从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次(add+commit)后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20230901092644429.png" alt="image-20230901092644429" style="zoom:20%;"><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">// `git merge`命令用于合并指定分支到当前分支。<br>git merge dev<br></code></pre></td></tr></table></figure><p>这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。</p><img src="https://gitee.com/muxuejiao/blog-img/raw/master/imgs/image-20230901092745218.png" style="zoom:20%;"><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 删除分支dev<br>git branch -d dev<br></code></pre></td></tr></table></figure><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p><h2 id="🌸-解决冲突"><a href="#🌸-解决冲突" class="headerlink" title="🌸 解决冲突"></a>🌸 解决冲突</h2><h2 id="🌸-分支管理策略"><a href="#🌸-分支管理策略" class="headerlink" title="🌸 分支管理策略"></a>🌸 分支管理策略</h2><h1 id="📚-命令汇总"><a href="#📚-命令汇总" class="headerlink" title="📚 命令汇总"></a>📚 命令汇总</h1><ul><li>远程仓库<ul><li>连接本地仓库和远程仓库：<code>git remote add origin git@github.com:LuoyNothing/mygit.git</code></li><li>第一次推送到远程仓库：<code>git push -u origin master</code></li><li>后续更新推送：<code>git push origin master</code></li><li>查看远程库信息：<code>git remote -v</code></li><li>删除本地仓库和远程仓库的连接：<code>git remote rm origin</code></li><li>从远程仓库克隆：<code>git clone 地址</code></li></ul></li><li>分支<ul><li>创建与合并分支<ul><li>创建分支：<code>git branch &lt;name&gt;</code></li><li>切换分支：<code>git switch &lt;name&gt;</code></li><li>创建并切换分支：<code>git switch -c &lt;name&gt;</code></li><li>合并分支：<code>git merge &lt;name&gt;</code></li><li>删除分支：<code>git branch -d &lt;name&gt;</code></li></ul></li></ul></li></ul><p>下篇在此结束，您花了5分钟又复习了一次相关知识，如果对你还有一点帮助的话，不妨给个小赞鼓励一下吧😊，感谢观看！</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>📣 处理hexo博客中图片不显示问题</title>
    <link href="/2023/08/31/%F0%9F%93%A3-%E5%A4%84%E7%90%86hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
    <url>/2023/08/31/%F0%9F%93%A3-%E5%A4%84%E7%90%86hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>搭建好个人博客网站之后，写了两篇markdown文章，然后按照hexo三连上传了文章，最后在浏览器打开发现图像不显示：</p><img src="/2023/08/31/%F0%9F%93%A3-%E5%A4%84%E7%90%86hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/image-20230831174532132.png" alt="image-20230831174532132" style="zoom:50%;"><p>一般图片显示不出来很大的原因是路径不对。于是我去查看了图片路径，确实找不到相应的图片。然后我参考<a href="http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/">相关资料</a>了解到<code>hexo g</code>指令是将md文件生成html页面，然后每篇博文生成的html页面最后都是放在用年月日做文件夹的下面，例如：<code>E:\myblog\public\2023\08\31\test</code>。</p><p>下面是我参考<a href="https://leay.net/2019/12/25/hexo/">养恐龙</a>、[ETRD](<a href="http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/">hexo中完美插入本地图片 | ETRD</a>)、<a href="https://blog.csdn.net/m0_43401436/article/details/107191688">金牛大王</a>三位的回答，最终解决了我的问题。</p><p><strong>第一步：</strong>确保你的Hexo的配置文件_config.yml里面有这个选项配置，并将其置为true</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>这个功能实际上是Hexo官方文档中提到的资源文件夹功能，它的作用在于当你使用<code>hexo n &quot;文章名&quot;</code>生成一篇新文章时，会在<code>\source\_posts</code>目录下生成一个 文章名.md 文件外，附带生成一个与 文章名 同名的文件夹，可以用它来存放这篇文章的所有资源，比如图片，附件等。</p><img src="/2023/08/31/%F0%9F%93%A3-%E5%A4%84%E7%90%86hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/image-20230831180318491.png" alt="image-20230831180318491" style="zoom: 67%;"><p>【注】你也可以自己在 _posts 文件夹下自己生成md文件和相同名字的文件夹（用于存放图片）</p><p><strong>第二步：</strong>typora中的图像保存位置设置</p><p>点开文件——&gt;偏好设置，设置如下：</p><img src="/2023/08/31/%F0%9F%93%A3-%E5%A4%84%E7%90%86hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/image-20230831180845755.png" alt="image-20230831180845755" style="zoom:50%;"><p>修改好后，图片引用路径就在和博文同名的文件夹（新建博文名为test）的图片，如图所示：</p><img src="/2023/08/31/%F0%9F%93%A3-%E5%A4%84%E7%90%86hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/image-20230831181843479.png" alt="image-20230831181843479" style="zoom:50%;"><p><strong>第三步</strong>：安装插件</p><p>在根目录下打开git bash，然后运行以下命令，如果有安装淘宝镜像，第一个改为cnpm即可。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/xcodebuild/</span>hexo-asset-image.git<br></code></pre></td></tr></table></figure><p>运行结果如下图所示，图为安装成功：</p><img src="/2023/08/31/%F0%9F%93%A3-%E5%A4%84%E7%90%86hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/image-20230831181210648.png" alt="image-20230831181210648" style="zoom:70%;"><p>该插件的作用：将图片等静态资源的引用路径转化为绝对路径。</p><p>【注】我最开始不是用的上面命令安装的，用的是<code>npm install hexo-asset-image -- save</code>，该命令安装的是插件 hexo-asset-image 1.0 ，这个版本有点问题，安装后图片不能正常显示，查看图片路径被渲染成了 <code>/.xx/abc.png</code> 的格式（xx 是域名后缀）。最后采用上面的命令才成功。</p><p>—————–分割线——————-</p><p>网上查了一些有关md文件中图片的保存位置，发现除了在本地保存外，还可以采用图床进行保存，可以尝试一下<a href="https://github.com/Molunerfinn/PicGo">PicGo</a> 这个图床上传工具，也方便md文件在其他站的上传。</p><p>参考资料：<a href="https://blog.csdn.net/weixin_61529967/article/details/132273065">前端小雪</a>、<a href="https://blog.csdn.net/weixin_43447266/article/details/132490718">刘昕hrf</a>、<a href="https://blog.csdn.net/weixin_45525272/article/details/125387761">杨 戬</a></p><p>我的图床：gitee</p>]]></content>
    
    
    <categories>
      
      <category>个人博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>📣 git基本操作（上），命令总结清单在最后</title>
    <link href="/2023/08/31/%F0%9F%93%A3-git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%8C%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%E6%B8%85%E5%8D%95%E5%9C%A8%E6%9C%80%E5%90%8E/"/>
    <url>/2023/08/31/%F0%9F%93%A3-git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%8C%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%E6%B8%85%E5%8D%95%E5%9C%A8%E6%9C%80%E5%90%8E/</url>
    
    <content type="html"><![CDATA[<p>本篇是学习(<a href="https://www.liaoxuefeng.com/wiki/896043488029600/898732864121440">廖雪峰Git学习</a>)所写的学习总结笔记</p><h1 id="📚-git简介"><a href="#📚-git简介" class="headerlink" title="📚 git简介"></a>📚 git简介</h1><p>git 是一个版本控制工具，可以用于团队协作。git可以记录之前修改过的内容版本，方便在需要的时候回退到之前的版本，还支持团队内部进行协作更新内容。</p><p>用起来大概就是下面这样子，可以记录修改的版本，谁修改的，修改了哪些内容以及日期：<br><img src="/2023/08/31/%F0%9F%93%A3-git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%8C%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%E6%B8%85%E5%8D%95%E5%9C%A8%E6%9C%80%E5%90%8E/image-20230831190029566.png" alt="image-20230831190029566" style="zoom:25%;"></p><p>Git是分布式版本控制系统，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。</p><p>Git还具有极其强大的分支管理</p><h1 id="📚-git安装"><a href="#📚-git安装" class="headerlink" title="📚 git安装"></a>📚 git安装</h1><p>在这里只描述windows上安装git</p><p>在Windows上使用Git，可以从Git官网直接<a href="https://git-scm.com/downloads">下载安装程序</a>，然后按默认选项安装即可。</p><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p><p>安装完成后，还需要最后一步设置，在命令行输入：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;Your Name&quot;</span><br>$ git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>因为是分布式版本控制系统，所以需要知道你是谁。注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><h2 id="🌸-名词解释"><a href="#🌸-名词解释" class="headerlink" title="🌸 名词解释"></a>🌸 名词解释</h2><ul><li><strong>工作区</strong>：本地电脑存放文件的文件夹</li><li>**暂存区(index&#x2F;stage)**：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。版本库中包含2个部分，一部分就是暂存区,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；</li><li><strong>本地仓库</strong>：.git文件夹里还包括git自动创建的第一个分支：master，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；</li><li><strong>远程仓库</strong>：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，更新后推送到远程仓库中即可；</li></ul><p>​<img src="/2023/08/31/%F0%9F%93%A3-git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%8C%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%E6%B8%85%E5%8D%95%E5%9C%A8%E6%9C%80%E5%90%8E/image-20230831190215308.png" alt="image-20230831190215308" style="zoom:40%;"><br>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><h2 id="🌸-本地仓库"><a href="#🌸-本地仓库" class="headerlink" title="🌸 本地仓库"></a>🌸 本地仓库</h2><p><strong>1.创建版本库：</strong><br>    什么是版本库呢？英文名<strong>repository</strong>，可以简单理解为一个文件夹，该文件夹下的文件都可以被Git管理起来。</p><p>通过<code>git init</code>命令将这个文件夹变为git可以管理的仓库。建好仓库之后，会出现一个.git文件，该文件是git跟踪管理版本库的，千万不能修改！如果没有该文件，说明是默认隐藏的，输入<code>ls -ah</code>就可以看见。</p><p><strong>2.在版本库中加文件</strong></p><p>所有的版本控制系统其实只能监控文本文件的改动，比如txt文件，网页，所有的程序代码等，git也不例外。而图片、视频这些二进制文件，虽然也能用版本控制系统管理，但是不能跟踪文件的变化，word文件也是二进制文件。</p><p>接下来就是上次文件的步骤：首先新建一个readme.txt文件，并随便写入一些内容</p><ul><li><code>git add readme.txt</code></li><li><code>git commit -m &quot;write readme txt&quot;</code></li></ul><p><code>git add readme.txt</code> 表示告诉git,将文件添加到仓库中，无输出则成功。</p><p><code>git commit -m &quot;本次提交的说明&quot;</code> 表示告诉git，将代码提交到仓库，后面附带对本次提交的说明。该语句执行完会返回一个文件被修改，插入了n行内容（取决于你写了多少内容）。为什么Git添加文件需要<code>add</code>，<code>commit</code>一共两步呢？因为<code>commit</code>可以一次提交很多文件，所以你可以多次<code>add</code>不同的文件。</p><img src="/2023/08/31/%F0%9F%93%A3-git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%8C%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%E6%B8%85%E5%8D%95%E5%9C%A8%E6%9C%80%E5%90%8E/image-20230831190849146.png" alt="image-20230831190849146" style="zoom:50%;"><p>如果文件有修改，则再执行以上2个步骤即可。</p><h1 id="📚-时光穿梭机"><a href="#📚-时光穿梭机" class="headerlink" title="📚 时光穿梭机"></a>📚 时光穿梭机</h1><h2 id="🌸-版本回退"><a href="#🌸-版本回退" class="headerlink" title="🌸 版本回退"></a>🌸 版本回退</h2><p>要回到之前的版本，我们可以使用<code>git log --pretty=oneline</code>命令显示从最近到最远的提交日志。</p><img src="/2023/08/31/%F0%9F%93%A3-git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%8C%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%E6%B8%85%E5%8D%95%E5%9C%A8%E6%9C%80%E5%90%8E/image-20230831190946713.png" alt="image-20230831190946713" style="zoom:33%;"><p>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本。假如我们要回到第一版本，可以使用<code>git reset --hard 版本号</code>，版本号就是黄色的那一个字符串。</p><p>1.回退到第一版本，当前在第三版本</p><img src="/2023/08/31/%F0%9F%93%A3-git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%8C%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%E6%B8%85%E5%8D%95%E5%9C%A8%E6%9C%80%E5%90%8E/image-20230831191025836.png" alt="image-20230831191025836" style="zoom:40%;"><p>2.回退到第三版本，当前在第一版本</p><img src="/2023/08/31/%F0%9F%93%A3-git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%8C%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%E6%B8%85%E5%8D%95%E5%9C%A8%E6%9C%80%E5%90%8E/image-20230831191049871.png" alt="image-20230831191049871" style="zoom:40%;"><p>3.如果想回到新的版本，但是找不到版本号：可以使用git reflog来查看你的每一次命令（从近到远）</p><img src="/2023/08/31/%F0%9F%93%A3-git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%8C%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%E6%B8%85%E5%8D%95%E5%9C%A8%E6%9C%80%E5%90%8E/image-20230831191126828.png" alt="image-20230831191126828" style="zoom:40%;"><p>在上图中就可以找到最新版本的版本号，版本号可以不写全，但也不能写太少，防止版本号重复。</p><h2 id="🌸-撤销修改"><a href="#🌸-撤销修改" class="headerlink" title="🌸 撤销修改"></a>🌸 撤销修改</h2><p><code>git checkout -- file</code>可以丢弃工作区的修改，意思就是，把文件在工作区的修改全部撤销，这里有两种情况：</p><ul><li><p>文件自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；利用<code>cat</code>命令可以查看文件里的内容，这里要撤销最新的修改，最后一行（已成功）</p><img src="/2023/08/31/%F0%9F%93%A3-git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%8C%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%E6%B8%85%E5%8D%95%E5%9C%A8%E6%9C%80%E5%90%8E/image-20230831191206496.png" alt="image-20230831191206496" style="zoom:40%;"></li><li><p>文件已经添加到暂存区(stage)。可以使用<code>git reset HEAD 文件名+后缀</code>来把暂存区的修改撤销掉（unstage），重新放回工作区。然后<code>git checkout -- file</code>即可</p><img src="/2023/08/31/%F0%9F%93%A3-git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%8C%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%E6%B8%85%E5%8D%95%E5%9C%A8%E6%9C%80%E5%90%8E/image-20230831191310780.png" alt="image-20230831191310780" style="zoom:40%;"></li></ul><p>现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程，如果提交到远程仓库就G啦。</p><h2 id="🌸-删除文件"><a href="#🌸-删除文件" class="headerlink" title="🌸 删除文件"></a>🌸 删除文件</h2><p>在工作区删除文件之后，工作区和版本库就不一样了，git status可以告知你删除了什么文件。下面分为2种情况</p><ul><li>确实要删除文件，在版本库中也有删除。则直接用命令<code>git rm &lt;file&gt;</code>删掉，并且<code>git commit</code></li><li>如果是误删。在工作区删除了文件，但是版本库中还有，则恢复文件：<code>git checkout -- &lt;file&gt;</code>。<code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</li></ul><blockquote><p>【注】未添加到版本库的文件被删除掉是不能被恢复的！</p></blockquote><h2 id="🌸-命令总结："><a href="#🌸-命令总结：" class="headerlink" title="🌸 命令总结："></a>🌸 命令总结：</h2><ul><li><p>初始化版本库</p><ul><li><code>git init</code> 创建版本库</li></ul></li><li><p>添加文件</p><ul><li><code>git add</code> 文件名+后缀 将文件加入版本库</li><li><code>git commit -m &quot;提交说明内容&quot;</code> 将文件提交到版本库</li></ul></li><li><p>回退文件版本</p><ul><li><code>git status</code> 查看仓库当前的状态</li><li><code>git diff 文件名+后缀</code> 查看某文件的更改内容</li><li><code>git log</code> 显示从最近到最远的提交日志，<code>git log --pretty=oneline</code>显示的内容更精简。</li><li><code>git reset --hard 版本号</code> 回退到某个版本</li><li><code>git reflog</code> 如果不知道版本号，可以查看之前使用过的命令，从而找到版本号</li></ul></li><li><p>撤销修改</p><ul><li><code>git checkout -- &lt;file&gt;</code>可以丢弃工作区的修改</li><li><code>git reset HEAD 文件名+后缀</code>来把暂存区的修改撤销掉（unstage）</li></ul></li></ul><p>上篇在此结束，您花了5分钟又学到了新的知识，如果对你还有一点帮助的话，不妨给个小赞鼓励一下吧😊，感谢观看！</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>📣 用hexo搭建个人博客（持续更新中）</title>
    <link href="/2023/08/30/%F0%9F%93%A3-%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/"/>
    <url>/2023/08/30/%F0%9F%93%A3-%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>本文记录自己搭建个人博客的历程，欢迎收看~</p><h1 id="📚-搭建基础的个人博客"><a href="#📚-搭建基础的个人博客" class="headerlink" title="📚 搭建基础的个人博客"></a>📚 搭建基础的个人博客</h1><blockquote><p><strong>前提：需安装了git 和 nodejs</strong></p></blockquote><ol><li><p>安装hexo。先新建一个文件夹，在该文件夹下打开git bash，然后运行<code>npm install -g hexo-cli</code></p>  <img src="/2023/08/30/%F0%9F%93%A3-%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/image-20230831182644679.png" alt="image-20230831182644679" style="zoom:40%;"></li><li><p>初始化hexo，命令为：<code>hexo init</code> ，出现下图结果就表示初始化成功！</p></li></ol>  <img src="/2023/08/30/%F0%9F%93%A3-%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/image-20230831182815646.png" alt="image-20230831182815646" style="zoom:50%;">  新建完成后，在路径下会产生一些文件和文件夹：  <img src="/2023/08/30/%F0%9F%93%A3-%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/image-20230831182901052.png" alt="image-20230831182901052" style="zoom:40%;">    <ul><li><code>_config.yml</code>：俗称站点配置文件，很多与博客网站的格式、内容相关的设置都需要在里面改。</li><li><code>node_modules</code>:存储Hexo插件的文件，可以实现各种扩展功能。一般不需要管。</li><li><code>package.json</code>：相关描述的，比如名字、版本。</li><li><code>scaffolds</code>：模板文件夹，里面的<code>post.md</code>文件可以设置每一篇博客的模板。具体用起来就知道能干嘛了。</li><li><code>source</code>：非常重要。所有的个人文件都在里面！</li><li><code>themes</code>：主题文件夹，可以从<a href="https://link.juejin.cn/?target=https://hexo.io/themes/" title="https://hexo.io/themes/">Hexo主题官网</a>或者网上大神的Github主页下载各种各样美观的主题，让自己的网站变得逼格高端的关键！</li></ul><ol start="3"><li>启动服务器</li></ol><p>命令为：<code>hexo server</code>，或者简写：<code>hexo s</code>，然后打开浏览器，在地址栏输入：localhost:4000回车就可以得到如下结果：(ctrl+c可关闭服务)</p><img src="/2023/08/30/%F0%9F%93%A3-%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/image-20230831183110624.png" alt="image-20230831183110624" style="zoom:50%;"><p>至此，您的Hexo博客已经搭建在本地。</p><p>4.上传到github</p><p>在github创建仓库，仓库名为：&lt;Github账号名称&gt;.github.io（必须是这个，否则后续打不开）。安装<code>hexo-deployer-git</code>插件。在命令行（即Git Bash）运行以下命令即可（也可以走淘宝镜像，淘宝镜像就是换成cnpm）：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>添加SSH key，如果已添加可以不用管。如果未添加，可以参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416">添加SSH key</a>，我这里已经添加，接着下一步；</p><ol start="5"><li>修改<code>_config.yml</code>（在站点目录下）。文件末尾修改为：<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:LuoyNothing/LuoyNothing.github.io.git<br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure>6.生成页面并上传到github</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 生成页面：<br>hexo g<br><span class="hljs-regexp">//</span> 上传到github: <br>hexo d<br></code></pre></td></tr></table></figure><p>执行完上面两个命令，并出现下图结果即表示上传成功。<br><img src="/2023/08/30/%F0%9F%93%A3-%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/image-20230831183804277.png" alt="image-20230831183804277" style="zoom:40%;"></p><p>至此，您的Hexo博客已经搭建在GitHub上，访问域名为：<a href="https://luoynothing.github.io/">https://luoynothing.github.io/</a></p><img src="/2023/08/30/%F0%9F%93%A3-%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/image-20230831183250197.png" alt="image-20230831183250197" style="zoom:40%;"><p>访问博客，开始的页面是初始化页面，没有做美化和增加内容。</p><h2 id="🌸-域名绑定"><a href="#🌸-域名绑定" class="headerlink" title="🌸 域名绑定"></a>🌸 域名绑定</h2><p>还未绑定</p><h1 id="📚-文档学习"><a href="#📚-文档学习" class="headerlink" title="📚 文档学习"></a>📚 文档学习</h1><p>官网文档：<a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p><h2 id="🌸-修改主题"><a href="#🌸-修改主题" class="headerlink" title="🌸 修改主题"></a>🌸 修改主题</h2><p>我的博客修改的主题是fluid（<a href="https://hexo.fluid-dev.com/docs/start/"> Hexo Fluid 用户手册</a>）,github(<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid Hexo 主题</a>)，以下是详细步骤：</p><ol><li>下载主题</li></ol><p><strong>方式一</strong>：推荐通过 npm 直接安装，进入博客目录执行命令：<code>npm install --save hexo-theme-fluid</code></p><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的_config.yml内容复制过去。</p><p><strong>方式二</strong>：下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">最新 release 版本</a>解压到 themes 目录，并将解压出的文件夹重命名为 <code>fluid</code>。</p><p>我采用的是方式二。</p><ol start="2"><li><p>然后采用hexo三连，就可以在本地查看到主题修改</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">// 清除缓存文件 `db.json` 和已生成的静态文件 `public`。<br>hexo cl <br>// 生成网站静态文件到默认设置的 `public` 文件夹。<br>hexo g<br>// 启动本地服务器，用于预览主题。<br>hexo s<br></code></pre></td></tr></table></figure><p>下图表示换主题成功！然后可以用<code>localhost:4000</code>来访问个人博客</p><img src="/2023/08/30/%F0%9F%93%A3-%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/image-20230831183332468.png" alt="image-20230831183332468" style="zoom:40%;"></li><li><p>部署到github上：</p></li></ol><p>hexo三连：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">// 清除缓存文件 `db.json` 和已生成的静态文件 `public`。<br>hexo cl <br>// 生成网站静态文件到默认设置的 `public` 文件夹。<br>hexo g<br>// 部署到远程仓库里<br>hexo d<br></code></pre></td></tr></table></figure><p>然后可以用<a href="https://luoynothing.github.io/">https://luoynothing.github.io/</a> 来访问个人博客了。</p><h2 id="🌸-发布文章"><a href="#🌸-发布文章" class="headerlink" title="🌸 发布文章"></a>🌸 发布文章</h2><p>1.新建md文件。在网站根目录下git bash，输入<code>hexo new &lt;title&gt;</code>，执行该命令，Hexo会在<code>/source/_posts</code>目录下创建一篇新的文章。</p><p>2.上传到github，就是hexo三连操作。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">// 清除缓存文件 `db.json` 和已生成的静态文件 `public`。<br>hexo cl <br>// 生成网站静态文件到默认设置的 `public` 文件夹。<br>hexo g<br>// 部署到远程仓库里<br>hexo d<br></code></pre></td></tr></table></figure><h1 id="📚-博客更新说明"><a href="#📚-博客更新说明" class="headerlink" title="📚 博客更新说明"></a>📚 博客更新说明</h1><p><strong>2023-8-30</strong></p><p>1.成功搭建博客</p><p>2.博客文章：</p><p>​1.封面字段：标题、发布时间、关键字</p><p>​摘要：去掉摘要</p><p>​2.封面进去：发布时间、更新时间、字数、阅读时长​</p><p>3.标签和分类：</p><p>分类1：前端</p><p>​子类：html css等</p><p>分类2：持续更新</p><p>标签：相当于关键字吧，里面的某个知识点</p><p>4.博客中的图片不显示问题</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
